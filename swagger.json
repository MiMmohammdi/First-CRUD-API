{
  "swagger": "2.0",
  "info": {
    "version": "0.0.5",
    "title": "My First CRUD API",
    "description": "RESTful APIs for CRUD operations in two databases, mySQL and MongoDB"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1/",
  "tags": [
    {
      "name": "Register",
      "description": "Register and get Auth token"
    },
    {
      "name": "Users",
      "description": "CRUD opration foor users"
    }
  ],
  "paths": {
    "/{db}/users/create": {
      "post": {
        "tags": ["Users"],
        "summary": "Create new user in system",
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "User Auth token",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "in": "path",
            "name": "db",
            "description": "Database type",
            "type": "string",
            "enum": ["sql", "nosql"],
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "New user created.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/{db}/users/find_all": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "description": "User authorization token",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        {
          "in": "path",
          "name": "db",
          "description": "Database type",
          "type": "string",
          "enum": ["sql", "nosql"],
          "required": true
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get all users in system",
        "responses": {
          "202": {
            "description": "User list received successfully.OK",
            "schema": {
              "$ref": "#/definitions/All"
            }
          }
        }
      }
    },
    "/{db}/users/find/{id}": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "description": "User authorization token",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        },
        {
          "in": "path",
          "name": "db",
          "description": "Database type",
          "type": "string",
          "enum": ["sql", "nosql"],
          "required": true
        }
      ],
      "get": {
        "summary": "Find user with give ID",
        "tags": ["Users"],
        "responses": {
          "202": {
            "description": "User is find.",
            "schema": {
              "$ref": "#/definitions/FindUser"
            }
          }
        }
      }
    },
    "/{db}/users/update/{id}": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "description": "User authorization token",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        },
        {
          "in": "path",
          "name": "db",
          "description": "Database type",
          "type": "string",
          "enum": ["sql", "nosql"],
          "required": true
        }
      ],
      "put": {
        "summary": "Update user with give ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was updated successfully.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/{db}/users/delete/{id}": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "description": "User authorization token",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        },
        {
          "in": "path",
          "name": "db",
          "description": "Database type",
          "type": "string",
          "enum": ["sql", "nosql"],
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete user with give ID",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User was deleted successfully.",
            "schema": {
              "$ref": "#/definitions/FindUser"
            }
          }
        }
      }
    },
    "/{db}/users/delete_all": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "description": "User authorization token",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        {
          "in": "path",
          "name": "db",
          "description": "Database type",
          "type": "string",
          "enum": ["sql", "nosql"],
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete all user",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "Users is deleted.",
            "schema": {
              "$ref": "#/definitions/All"
            }
          }
        }
      }
    },
    "/{db}/register/sign_up": {
      "post": {
        "tags": ["Register"],
        "summary": "If user not exist create new user",
        "description": "If user not exist create new user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "If user not exist create new user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "in": "path",
            "name": "db",
            "description": "Database type",
            "type": "string",
            "enum": ["sql", "nosql"],
            "required": true
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Register",
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        }
      }
    },
    "/{db}/register/sign_in": {
      "post": {
        "tags": ["Register"],
        "summary": "Authenticate user",
        "description": "Authenticate user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "SignIn user",
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          },
          {
            "in": "path",
            "name": "db",
            "description": "Database type",
            "type": "string",
            "enum": ["sql", "nosql"],
            "required": true
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "User authorization token",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "New user signIn.",
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": ["username", "password", "name"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "age": {
          "type": "number"
        }
      }
    },
    "UpdateUser": {
      "required": ["username", "password", "name"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "age": {
          "type": "number"
        }
      }
    },
    "FindUser": {
      "required": ["id", "db"],
      "properties": {
        "id": {
          "type": "string"
        },
        "db": {
          "type": "string"
        }
      }
    },
    "All": {
      "required": ["db"],
      "properties": {
        "db": {
          "type": "string"
        }
      }
    },
    "SignUp": {
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "age": {
          "type": "number"
        }
      }
    },
    "SignIn": {
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    }
  },
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"]
}
